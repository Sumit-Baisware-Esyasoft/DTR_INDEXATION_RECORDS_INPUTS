import streamlit as st
import pandas as pd
from datetime import datetime
import gspread
from oauth2client.service_account import ServiceAccountCredentials
import streamlit.components.v1 as components

st.set_page_config(page_title="DTR ‡§∏‡•á Consumer Indexation ‡§ï‡•Ä ‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ", layout="centered")

# Title
st.title("üìë DTR ‡§∏‡•á Consumer Indexation ‡§ï‡•Ä ‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ")

# Load Google credentials
creds_dict = st.secrets["gcp_service_account"]
scope = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/drive"
]
credentials = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
client = gspread.authorize(credentials)

# Open Google Sheet
SHEET_NAME = "DTR_Indexation_Records"
sheet = client.open(SHEET_NAME).sheet1

# --------- Load Hierarchy File ----------
try:
    hierarchy_path = r"DTR Master Information 2025-09-22 07-00_21992_batch1.xlsx"
    hierarchy_df = pd.read_excel(hierarchy_path)

    region = st.selectbox("‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ (Region) ‡§ö‡•Å‡§®‡•á‡§Ç", hierarchy_df["Region"].unique())
    circle = st.selectbox("‡§∏‡§∞‡•ç‡§ï‡§≤ (Circle) ‡§ö‡•Å‡§®‡•á‡§Ç", hierarchy_df[hierarchy_df["Region"] == region]["Circle"].unique())
    division = st.selectbox("‡§°‡§ø‡§µ‡•Ä‡§ú‡§® (Division) ‡§ö‡•Å‡§®‡•á‡§Ç", hierarchy_df[hierarchy_df["Circle"] == circle]["Division"].unique())
    zone = st.selectbox("‡§ú‡§º‡•ã‡§® (Zone) ‡§ö‡•Å‡§®‡•á‡§Ç", hierarchy_df[hierarchy_df["Division"] == division]["Zone"].unique())
    substation = st.selectbox("‡§â‡§™‡§ï‡•á‡§Ç‡§¶‡•ç‡§∞ (Substation) ‡§ö‡•Å‡§®‡•á‡§Ç", hierarchy_df[hierarchy_df["Zone"] == zone]["Sub station"].unique())
    feeder = st.selectbox("‡§´‡•Ä‡§°‡§∞ (Feeder) ‡§ö‡•Å‡§®‡•á‡§Ç", hierarchy_df[hierarchy_df["Sub station"] == substation]["Feeder"].unique())
    dtr = st.selectbox("‡§°‡•Ä‡§ü‡•Ä‡§Ü‡§∞ (DTR) ‡§ö‡•Å‡§®‡•á‡§Ç", hierarchy_df[hierarchy_df["Feeder"] == feeder]["Dtr"].unique())
    dtr_code = st.selectbox("‡§°‡•Ä‡§ü‡•Ä‡§Ü‡§∞ ‡§ï‡•ã‡§° ‡§ö‡•Å‡§®‡•á‡§Ç", hierarchy_df[hierarchy_df["Dtr"] == dtr]["Dtr code"].unique())
    feeder_code = st.selectbox("‡§´‡•Ä‡§°‡§∞ ‡§ï‡•ã‡§° ‡§ö‡•Å‡§®‡•á‡§Ç", hierarchy_df[hierarchy_df["Dtr"] == dtr]["Feeder code"].unique())
    msn_auto = st.selectbox("‡§Æ‡•Ä‡§ü‡§∞ ‡§∏‡•Ä‡§∞‡§ø‡§Ø‡§≤ ‡§®‡§Ç‡§¨‡§∞ (MSN) ‡§ö‡•Å‡§®‡•á‡§Ç", hierarchy_df[hierarchy_df["Dtr code"] == dtr_code]["Msn"].unique())

except Exception as e:
    st.error(f"‚ö†Ô∏è ‡§Æ‡§æ‡§∏‡•ç‡§ü‡§∞ ‡§´‡§º‡§æ‡§á‡§≤ ‡§≤‡•ã‡§° ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ: {e}")
    region, circle, division, zone, substation, feeder, dtr, dtr_code, feeder_code, msn_auto = [None]*10

# --------- Confirm MSN ----------
final_msn = None
new_msn = None

if msn_auto:
    st.write(f"üîç ‡§ö‡•Å‡§®‡§æ ‡§ó‡§Ø‡§æ MSN: **{msn_auto}**")
    confirm = st.radio("‡§ï‡•ç‡§Ø‡§æ ‡§Ø‡§π MSN ‡§∏‡§π‡•Ä ‡§π‡•à?", ["‡§π‡§æ‡§Å, ‡§∏‡§π‡•Ä ‡§π‡•à ‚úÖ", "‡§®‡§π‡•Ä‡§Ç, ‡§¨‡§¶‡§≤‡§®‡§æ ‡§π‡•à ‚ùå"], horizontal=True)

    if confirm == "‡§π‡§æ‡§Å, ‡§∏‡§π‡•Ä ‡§π‡•à ‚úÖ":
        final_msn = msn_auto
    else:
        new_msn = st.text_input("‡§®‡§Ø‡§æ MSN ‡§¶‡§∞‡•ç‡§ú ‡§ï‡§∞‡•á‡§Ç")
        if new_msn:
            final_msn = new_msn

# --------- Analog Clock Time Picker ----------
def analog_clock_picker(label):
    """Custom analog clock picker using JS component"""
    st.markdown(f"### {label}")
    components.html(f"""
    <html>
    <head>
      <link href="https://cdn.jsdelivr.net/npm/mdtimepicker@0.6.3/mdtimepicker.min.css" rel="stylesheet">
    </head>
    <body style="font-family: sans-serif; text-align: center; padding-top: 10px;">
      <input id="{label}_picker" type="text" placeholder="Select time" style="font-size:20px; padding:8px; width:200px; text-align:center; border-radius:8px;">
      <script src="https://cdn.jsdelivr.net/npm/mdtimepicker@0.6.3/mdtimepicker.min.js"></script>
      <script>
        const tp = mdtimepicker('#{label}_picker', {{
            format: 'hh:mm tt',
            theme: 'purple',
            hourPadding: true
        }});
      </script>
    </body>
    </html>
    """, height=220)

    return st.text_input(f"{label} (‡§Æ‡•à‡§®‡•ç‡§Ø‡•Å‡§Ö‡§≤ ‡§™‡•Å‡§∑‡•ç‡§ü‡§ø ‡§ï‡§∞‡•á‡§Ç)", "")

# --------- Date & Time inputs ----------
if final_msn:
    dtr_off_time = analog_clock_picker("‡§°‡•Ä‡§ü‡•Ä‡§Ü‡§∞ ‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§∏‡§Æ‡§Ø")
    dtr_on_time = analog_clock_picker("‡§°‡•Ä‡§ü‡•Ä‡§Ü‡§∞ ‡§ö‡§æ‡§≤‡•Ç ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§∏‡§Æ‡§Ø")
    date = st.date_input("‡§¶‡§ø‡§®‡§æ‡§Ç‡§ï ‡§ö‡•Å‡§®‡•á‡§Ç", datetime.today())

    # --------- Submit ----------
    if st.button("Submit"):
        if not dtr_off_time or not dtr_on_time:
            st.warning("‚è∞ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§¶‡•ã‡§®‡•ã‡§Ç ‡§∏‡§Æ‡§Ø ‡§≠‡§∞‡•á‡§Ç!")
        else:
            new_data = [
                region, circle, division, zone, substation,
                feeder, dtr, dtr_code, feeder_code,
                msn_auto, new_msn if new_msn else "",
                final_msn, dtr_off_time, dtr_on_time, date.strftime("%d-%m-%Y")
            ]
            sheet.append_row(new_data)

            st.success("‚úÖ ‡§°‡•á‡§ü‡§æ ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï Google Sheet ‡§Æ‡•á‡§Ç ‡§∏‡•á‡§µ ‡§π‡•ã ‡§ó‡§Ø‡§æ!")
            st.table(pd.DataFrame([new_data], columns=[
                "‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞", "‡§∏‡§∞‡•ç‡§ï‡§≤", "‡§°‡§ø‡§µ‡•Ä‡§ú‡§®", "‡§ú‡§º‡•ã‡§®", "‡§â‡§™‡§ï‡•á‡§Ç‡§¶‡•ç‡§∞",
                "‡§´‡•Ä‡§°‡§∞", "‡§°‡•Ä‡§ü‡•Ä‡§Ü‡§∞", "‡§°‡•Ä‡§ü‡•Ä‡§Ü‡§∞ ‡§ï‡•ã‡§°", "‡§´‡•Ä‡§°‡§∞ ‡§ï‡•ã‡§°",
                "Auto MSN", "New MSN", "Final MSN",
                "‡§°‡•Ä‡§ü‡•Ä‡§Ü‡§∞ ‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§∏‡§Æ‡§Ø", "‡§°‡•Ä‡§ü‡•Ä‡§Ü‡§∞ ‡§ö‡§æ‡§≤‡•Ç ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§∏‡§Æ‡§Ø", "‡§¶‡§ø‡§®‡§æ‡§Ç‡§ï"
            ]))
