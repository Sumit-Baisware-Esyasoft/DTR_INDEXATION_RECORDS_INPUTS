import streamlit as st
import pandas as pd
from datetime import datetime
import gspread
from oauth2client.service_account import ServiceAccountCredentials

st.set_page_config(page_title="DTR ‡§∏‡•á Consumer Indexation ‡§ï‡•Ä ‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ", layout="centered")

# Title in Hindi
st.title("üìë DTR ‡§∏‡•á Consumer Indexation ‡§ï‡•Ä ‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ")

# Load Google credentials from Streamlit Secrets
creds_dict = st.secrets["gcp_service_account"]

scope = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/drive"
]

credentials = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
client = gspread.authorize(credentials)

# Open Google Sheet
SHEET_NAME = "DTR_Indexation_Records"
sheet = client.open(SHEET_NAME).sheet1

# --------- Load Hierarchy File ----------
try:
    # Replace with your actual file path or keep in repo
    hierarchy_path = r"DTR Master Information 2025-09-22 07-00_21992_batch1.xlsx"
    hierarchy_df = pd.read_excel(hierarchy_path)

    # st.subheader("üìÇ DTR Master Data (Reference)")
    # st.dataframe(hierarchy_df.head())

    # --- Dropdowns (dependent filtering) ---
    region = st.selectbox("‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞ (Region) ‡§ö‡•Å‡§®‡•á‡§Ç", hierarchy_df["Region"].unique())

    circle = st.selectbox(
        "‡§∏‡§∞‡•ç‡§ï‡§≤ (Circle) ‡§ö‡•Å‡§®‡•á‡§Ç",
        hierarchy_df[hierarchy_df["Region"] == region]["Circle"].unique()
    )

    division = st.selectbox(
        "‡§°‡§ø‡§µ‡•Ä‡§ú‡§® (Division) ‡§ö‡•Å‡§®‡•á‡§Ç",
        hierarchy_df[hierarchy_df["Circle"] == circle]["Division"].unique()
    )

    zone = st.selectbox(
        "‡§ú‡§º‡•ã‡§® (Zone) ‡§ö‡•Å‡§®‡•á‡§Ç",
        hierarchy_df[hierarchy_df["Division"] == division]["Zone"].unique()
    )

    substation = st.selectbox(
        "‡§â‡§™‡§ï‡•á‡§Ç‡§¶‡•ç‡§∞ (Substation) ‡§ö‡•Å‡§®‡•á‡§Ç",
        hierarchy_df[hierarchy_df["Zone"] == zone]["Sub station"].unique()
    )

    feeder = st.selectbox(
        "‡§´‡•Ä‡§°‡§∞ (Feeder) ‡§ö‡•Å‡§®‡•á‡§Ç",
        hierarchy_df[hierarchy_df["Sub station"] == substation]["Feeder"].unique()
    )

    dtr = st.selectbox(
        "‡§°‡•Ä‡§ü‡•Ä‡§Ü‡§∞ (DTR) ‡§ö‡•Å‡§®‡•á‡§Ç",
        hierarchy_df[hierarchy_df["Feeder"] == feeder]["Dtr"].unique()
    )

    dtr_code = st.selectbox(
        "‡§°‡•Ä‡§ü‡•Ä‡§Ü‡§∞ ‡§ï‡•ã‡§° ‡§ö‡•Å‡§®‡•á‡§Ç",
        hierarchy_df[hierarchy_df["Dtr"] == dtr]["Dtr code"].unique()
    )

    feeder_code = st.selectbox(
        "‡§´‡•Ä‡§°‡§∞ ‡§ï‡•ã‡§° ‡§ö‡•Å‡§®‡•á‡§Ç",
        hierarchy_df[hierarchy_df["Dtr"] == dtr]["Feeder code"].unique()
    )

    msn = st.selectbox(
        "‡§Æ‡•Ä‡§ü‡§∞ ‡§∏‡•Ä‡§∞‡§ø‡§Ø‡§≤ ‡§®‡§Ç‡§¨‡§∞ (MSN) ‡§ö‡•Å‡§®‡•á‡§Ç",
        hierarchy_df[hierarchy_df["Dtr code"] == dtr_code]["Msn"].unique()
    )

except Exception as e:
    st.error(f"‚ö†Ô∏è ‡§Æ‡§æ‡§∏‡•ç‡§ü‡§∞ ‡§´‡§º‡§æ‡§á‡§≤ ‡§≤‡•ã‡§° ‡§ï‡§∞‡§®‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§Æ‡§∏‡•ç‡§Ø‡§æ: {e}")
    region, circle, division, zone, substation, feeder, dtr, dtr_code, feeder_code, msn = [None]*9

# --- Custom time picker ---
def custom_time_picker(label):
    st.write(f"### {label}")
    col1, col2, col3 = st.columns([2, 2, 2])

    with col1:
        hour = st.slider(f"{label} - ‡§ò‡§Ç‡§ü‡§æ", 1, 12, 12, key=label + "hour")
    with col2:
        minute = st.slider(f"{label} - ‡§Æ‡§ø‡§®‡§ü", 0, 59, 0, key=label + "minute")
    with col3:
        am_pm = st.radio(f"{label} - AM/PM", ["AM", "PM"], horizontal=True, key=label + "ampm")

    time_str = f"{hour:02d}:{minute:02d} {am_pm}"
    return time_str

# Time inputs
dtr_off_time = custom_time_picker("‡§°‡•Ä‡§ü‡•Ä‡§Ü‡§∞ ‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§∏‡§Æ‡§Ø")
dtr_on_time = custom_time_picker("‡§°‡•Ä‡§ü‡•Ä‡§Ü‡§∞ ‡§ö‡§æ‡§≤‡•Ç ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§∏‡§Æ‡§Ø")

# Date picker
date = st.date_input("‡§¶‡§ø‡§®‡§æ‡§Ç‡§ï ‡§ö‡•Å‡§®‡•á‡§Ç", datetime.today())

# --------- Submit Button ----------
if st.button("Submit"):
    if all([region, circle, division, zone, substation, feeder, dtr, dtr_code, feeder_code, msn, dtr_off_time, dtr_on_time, date]):
        new_data = [
            region, circle, division, zone, substation,
            feeder, dtr, dtr_code, feeder_code, msn,
            dtr_off_time, dtr_on_time, date.strftime("%d-%m-%Y")
        ]

        # Append row into Google Sheet
        sheet.append_row(new_data)

        st.success("‚úÖ ‡§°‡•á‡§ü‡§æ ‡§∏‡§´‡§≤‡§§‡§æ‡§™‡•Ç‡§∞‡•ç‡§µ‡§ï Google Sheet ‡§Æ‡•á‡§Ç ‡§∏‡•á‡§µ ‡§π‡•ã ‡§ó‡§Ø‡§æ!")
        st.table(pd.DataFrame([new_data], columns=[
            "‡§ï‡•ç‡§∑‡•á‡§§‡•ç‡§∞", "‡§∏‡§∞‡•ç‡§ï‡§≤", "‡§°‡§ø‡§µ‡•Ä‡§ú‡§®", "‡§ú‡§º‡•ã‡§®", "‡§â‡§™‡§ï‡•á‡§Ç‡§¶‡•ç‡§∞",
            "‡§´‡•Ä‡§°‡§∞", "‡§°‡•Ä‡§ü‡•Ä‡§Ü‡§∞", "‡§°‡•Ä‡§ü‡•Ä‡§Ü‡§∞ ‡§ï‡•ã‡§°", "‡§´‡•Ä‡§°‡§∞ ‡§ï‡•ã‡§°", "MSN",
            "‡§°‡•Ä‡§ü‡•Ä‡§Ü‡§∞ ‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§∏‡§Æ‡§Ø", "‡§°‡•Ä‡§ü‡•Ä‡§Ü‡§∞ ‡§ö‡§æ‡§≤‡•Ç ‡§ï‡§∞‡§®‡•á ‡§ï‡§æ ‡§∏‡§Æ‡§Ø", "‡§¶‡§ø‡§®‡§æ‡§Ç‡§ï"
        ]))
    else:
        st.warning("‚ö†Ô∏è ‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§≠‡•Ä ‡§´‡§º‡•Ä‡§≤‡•ç‡§° ‡§≠‡§∞‡•á‡§Ç, ‡§´‡§ø‡§∞ Submit ‡§ï‡§∞‡•á‡§Ç‡•§")

# --------- Display Latest Records ----------
st.subheader("üìã ‡§∏‡§≠‡•Ä ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§°‡•ç‡§∏")
records = sheet.get_all_records()
if records:
    df = pd.DataFrame(records)
    st.dataframe(df)
else:
    st.info("‡§Ö‡§≠‡•Ä ‡§§‡§ï ‡§ï‡•ã‡§à ‡§∞‡§ø‡§ï‡•â‡§∞‡•ç‡§° ‡§∏‡•á‡§µ ‡§®‡§π‡•Ä‡§Ç ‡§π‡•Å‡§Ü ‡§π‡•à‡•§")
