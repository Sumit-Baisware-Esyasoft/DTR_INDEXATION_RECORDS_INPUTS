import streamlit as st
import pandas as pd
from datetime import datetime
import gspread
from oauth2client.service_account import ServiceAccountCredentials

# ----------------- PAGE CONFIG -----------------
st.set_page_config(
    page_title="DTR рд╕реЗ Consumer Indexation рдХреА рдкреНрд░рдХреНрд░рд┐рдпрд╛",
    page_icon="ЁЯУС",
    layout="centered",
    initial_sidebar_state="collapsed"
)

# ----------------- HEADER -----------------
st.markdown("""
    <h1 style='text-align: center; color: #004aad; font-size: 36px;'>
        тЪб DTR рд╕реЗ Consumer Indexation рдХреА рдкреНрд░рдХреНрд░рд┐рдпрд╛
    </h1>
    <p style='text-align: center; color: gray; font-size: 18px;'>
        рдХреГрдкрдпрд╛ рдиреАрдЪреЗ рджреА рдЧрдИ рдЬрд╛рдирдХрд╛рд░реА рдзреНрдпрд╛рдирдкреВрд░реНрд╡рдХ рднрд░реЗрдВред
    </p>
    <hr style='margin-top: 10px; margin-bottom: 20px;'>
""", unsafe_allow_html=True)

# ----------------- GOOGLE SHEET CONNECTION -----------------
creds_dict = st.secrets["gcp_service_account"]
scope = [
    "https://spreadsheets.google.com/feeds",
    "https://www.googleapis.com/auth/drive"
]
credentials = ServiceAccountCredentials.from_json_keyfile_dict(creds_dict, scope)
client = gspread.authorize(credentials)
sheet = client.open("DTR_Indexation_Records").sheet1

# ----------------- LOAD HIERARCHY -----------------


try:
    hierarchy_path = r"DTR Master Information 2025-09-22 07-00_21992_batch1.xlsx"
    hierarchy_df = pd.read_excel(hierarchy_path)

    with st.expander("ЁЯФ╜ рд╡рд┐рд╡рд░рдг рдЪреБрдиреЗрдВ", expanded=True):
        region = st.selectbox("ЁЯМН рдХреНрд╖реЗрддреНрд░ (Region)", hierarchy_df["Region"].unique())
        circle = st.selectbox("ЁЯПЫя╕П рд╕рд░реНрдХрд▓ (Circle)", hierarchy_df[hierarchy_df["Region"] == region]["Circle"].unique())
        division = st.selectbox("ЁЯПв рдбрд┐рд╡реАрдЬрди (Division)", hierarchy_df[hierarchy_df["Circle"] == circle]["Division"].unique())
        zone = st.selectbox("ЁЯПа рд╡рд┐рддрд░рдг рдХреЗрдВрджреНрд░ (Zone)", hierarchy_df[hierarchy_df["Division"] == division]["Zone"].unique())
        substation = st.selectbox("тЪЩя╕П рдЙрдкрдХреЗрдВрджреНрд░ (Substation)", hierarchy_df[hierarchy_df["Zone"] == zone]["Sub station"].unique())
        feeder = st.selectbox("ЁЯФМ рдлреАрдбрд░ (Feeder)", hierarchy_df[hierarchy_df["Sub station"] == substation]["Feeder"].unique())
        dtr = st.selectbox("ЁЯзн рдбреАрдЯреАрдЖрд░ (DTR)", hierarchy_df[hierarchy_df["Feeder"] == feeder]["Dtr"].unique())
        dtr_code = st.selectbox("ЁЯУЯ рдбреАрдЯреАрдЖрд░ рдХреЛрдб", hierarchy_df[hierarchy_df["Dtr"] == dtr]["Dtr code"].unique())
        feeder_code = st.selectbox("ЁЯТб рдлреАрдбрд░ рдХреЛрдб", hierarchy_df[hierarchy_df["Dtr"] == dtr]["Feeder code"].unique())
        msn_auto = st.selectbox("ЁЯФв рдореАрдЯрд░ рд╕реАрд░рд┐рдпрд▓ рдирдВрдмрд░ (MSN)", hierarchy_df[hierarchy_df["Dtr code"] == dtr_code]["Msn"].unique())

except Exception as e:
    st.error(f"тЪая╕П рдорд╛рд╕реНрдЯрд░ рдлрд╝рд╛рдЗрд▓ рд▓реЛрдб рдХрд░рдиреЗ рдореЗрдВ рд╕рдорд╕реНрдпрд╛: {e}")
    region, circle, division, zone, substation, feeder, dtr, dtr_code, feeder_code, msn_auto = [None]*10

# ----------------- CONFIRM MSN -----------------
final_msn = None
new_msn = None

if msn_auto:
    st.markdown("### тЬЕ рдореАрдЯрд░ рд╕реАрд░рд┐рдпрд▓ рдирдВрдмрд░ рдХреА рдкреБрд╖реНрдЯрд┐ рдХрд░реЗрдВ")
    st.info(f"ЁЯФН рдЪреБрдирд╛ рдЧрдпрд╛ рдореАрдЯрд░ рд╕реАрд░рд┐рдпрд▓ рдирдВрдмрд░: **{msn_auto}**")
    confirm = st.radio("рдХреНрдпрд╛ рдпрд╣ рдореАрдЯрд░ рд╕реАрд░рд┐рдпрд▓ рдирдВрдмрд░ рд╕рд╣реА рд╣реИ?", ["рд╣рд╛рдБ, рд╕рд╣реА рд╣реИ тЬЕ", "рдирд╣реАрдВ, рдмрджрд▓рдирд╛ рд╣реИ тЭМ"], horizontal=True)

    if confirm == "рд╣рд╛рдБ, рд╕рд╣реА рд╣реИ тЬЕ":
        final_msn = msn_auto
    else:
        new_msn = st.text_input("тЬПя╕П рдирдпрд╛ рдореАрдЯрд░ рд╕реАрд░рд┐рдпрд▓ рдирдВрдмрд░ рджрд░реНрдЬ рдХрд░реЗрдВ")
        if new_msn:
            final_msn = new_msn

# ----------------- TIME PICKER FUNCTION -----------------
def simple_time_picker(label, key):
    st.markdown(f"**{label}**")
    col1, col2, col3 = st.columns([1,1,1])
    with col1:
        hour = st.selectbox("Hour", [f"{i:02d}" for i in range(1,13)], key=f"{key}_hour")
    with col2:
        minute = st.selectbox("Minute", [f"{i:02d}" for i in range(0,60)], key=f"{key}_minute")
    with col3:
        am_pm = st.selectbox("AM/PM", ["AM","PM"], key=f"{key}_ampm")
    return f"{hour}:{minute} {am_pm}"

# ----------------- DATE & TIME -----------------
if final_msn:
    st.markdown("<hr>", unsafe_allow_html=True)
    st.subheader("тП▒я╕П рдбреАрдЯреАрдЖрд░ рд╕рдордп рд╡рд┐рд╡рд░рдг")

    dtr_off_time = simple_time_picker("рдбреАрдЯреАрдЖрд░ рдмрдВрдж рдХрд░рдиреЗ рдХрд╛ рд╕рдордп", "off_time")
    dtr_on_time = simple_time_picker("рдбреАрдЯреАрдЖрд░ рдЪрд╛рд▓реВ рдХрд░рдиреЗ рдХрд╛ рд╕рдордп", "on_time")
    date = st.date_input("ЁЯУЕ рджрд┐рдирд╛рдВрдХ рдЪреБрдиреЗрдВ", datetime.today())
    st.markdown("<hr>", unsafe_allow_html=True)
    st.subheader("ЁЯСд рдЕрдзрд┐рдХрд╛рд░реА рдХреА рдЬрд╛рдирдХрд╛рд░реА")
    ae_je_name = st.text_input("ЁЯСитАНЁЯТ╝ AE/JE рдХрд╛ рдирд╛рдо")
    mobile_number = st.text_input("ЁЯУ▒ рдореЛрдмрд╛рдЗрд▓ рдирдВрдмрд░", max_chars=10, placeholder="10 рдЕрдВрдХреЛрдВ рдХрд╛ рдореЛрдмрд╛рдЗрд▓ рдирдВрдмрд░ рджрд░реНрдЬ рдХрд░реЗрдВ")

    st.markdown("<br>", unsafe_allow_html=True)
    st.markdown("<hr>", unsafe_allow_html=True)



   # ----------------- SUBMIT -----------------
    if st.button("ЁЯТ╛ рд╕рдмрдорд┐рдЯ рдХрд░реЗрдВ", use_container_width=True, type="primary"):
       new_data = [
         region, circle, division, zone, substation,
         feeder, dtr, dtr_code, feeder_code,
         msn_auto, new_msn if new_msn else "",
         final_msn, dtr_off_time, dtr_on_time, date.strftime("%d-%m-%Y"),
          ae_je_name, mobile_number   # тЬЕ Added two new columns at the end
       ]
        sheet.append_row(new_data)
        st.success("тЬЕ рдбреЗрдЯрд╛ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ Google Sheet рдореЗрдВ рд╕реЗрд╡ рд╣реЛ рдЧрдпрд╛!")

# ----------------- FOOTER -----------------
st.markdown("<hr>", unsafe_allow_html=True)
st.markdown("""
    <div style='text-align: center; color: gray; font-size: 15px;'>
        <b>Developed by Esyasoft GIS Team</b> | ┬й 2025<br>
        <span style='color:#004aad;'>DTR Indexation Portal</span>
    </div>
""", unsafe_allow_html=True)


st.image("download (1).png", width=150, caption="Esyasoft Technologies", use_container_width=False)
